# Создание файла group_activity_fixed.py с исправленным модулем

fixed_module_code = """
# -*- coding: utf-8 -*-

# This is a custom module for Hikka Userbot
# Author: Your Name
# Description: Counts messages in a group and kicks inactive members based on inactivity days.

from datetime import datetime, timedelta
from telethon import functions, types
from telethon.tl.types import ChannelParticipantsSearch
from .. import loader, utils

class GroupActivityMod(loader.Module):
    \"\"\"Counts messages in a group and kicks inactive members.\"\"\"
    strings = {"name": "GroupActivity"}

    async def msgcountcmd(self, message):
        \"\"\"Counts messages in the current group.
        Usage: .msgcount
        \"\"\"
        chat = message.chat
        if not chat:
            await message.edit("<b>This command can only be used in groups or channels.</b>")
            return

        participants = []
        try:
            async for user in message.client.iter_participants(chat.id):
                participants.append(user)
        except Exception as e:
            await message.edit(f"<b>Error fetching participants: {e}</b>")
            return

        counts = {}
        async for msg in message.client.iter_messages(chat.id):
            if msg.sender_id:
                counts[msg.sender_id] = counts.get(msg.sender_id, 0) + 1

        report = "<b>Message counts in this group:</b>\\n"
        for participant in participants:
            user_id = participant.id
            count = counts.get(user_id, 0)
            report += f"<b>{utils.escape_html(participant.first_name)}</b>: {count} messages\\n"

        await message.edit(report)

    async def kicatcmd(self, message):
        \"\"\"Kicks members inactive for specified days.
        Usage: .kicat <days>
        \"\"\"
        args = utils.get_args(message)
        if not args or not args[0].isdigit():
            await message.edit("<b>Specify the number of days of inactivity to kick. Example: .kicat 7</b>")
            return

        days = int(args[0])
        cutoff_date = datetime.now() - timedelta(days=days)

        chat = message.chat
        if not chat:
            await message.edit("<b>This command can only be used in groups or channels.</b>")
            return

        kicked_users = []
        try:
            async for participant in message.client.iter_participants(chat.id, filter=ChannelParticipantsSearch('')):
                if participant.bot or isinstance(participant.status, types.UserStatusRecently):
                    # Skip bots and recently active users
                    continue

                last_seen = getattr(participant.status, "was_online", None)
                if last_seen and last_seen < cutoff_date:
                    try:
                        await message.client.kick_participant(chat.id, participant.id)
                        kicked_users.append(participant)
                    except Exception as e:
                        await message.reply(f"<b>Failed to kick {participant.first_name}: {e}</b>")
        except Exception as e:
            await message.edit(f"<b>Error processing participants: {e}</b>")
            return

        if kicked_users:
            report = f"<b>Kicked {len(kicked_users)} inactive members:</b>\\n"
            for user in kicked_users:
                report += f"<b>{utils.escape_html(user.first_name)}</b>\\n"
            await message.edit(report)
        else:
            await message.edit("<b>No inactive members found to kick.</b>")
"""

file_path = "/mnt/data/group_activity_fixed.py"

with open(file_path, "w", encoding="utf-8") as file:
    file.write(fixed_module_code)

file_path
